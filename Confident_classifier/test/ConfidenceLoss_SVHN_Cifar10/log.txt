Namespace(batch_size=128, dataroot='../data', dataset='svhn', imageSize=32, no_cuda=False, num_classes=10, out_dataset='cifar10', outf='../test/19623/', pre_trained_net='/home/dell/OOD_Detection/Confident_classifier/results/joint_confidence_loss/20116/model_epoch_100.pth', seed=1)
Random Seed:  1
Load model
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU(inplace=True)
    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU(inplace=True)
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU(inplace=True)
    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU(inplace=True)
    (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (15): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (16): ReLU(inplace=True)
    (17): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): ReLU(inplace=True)
    (19): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (20): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): ReLU(inplace=True)
    (22): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (23): ReLU(inplace=True)
    (24): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (classifier): Sequential(
    (0): Linear(in_features=512, out_features=512, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=512, out_features=512, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=512, out_features=10, bias=True)
  )
)
load target data:  svhn
Building SVHN data loader with 1 workers
Using downloaded and verified file: ../data/svhn-data/train_32x32.mat
Using downloaded and verified file: ../data/svhn-data/test_32x32.mat
load non target data:  cifar10
Building CIFAR-10 data loader with 1 workers
Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ../data/cifar10-data/cifar-10-python.tar.gz
  0%|          | 0/170498071 [00:00<?, ?it/s]  1%|          | 1409024/170498071 [00:00<00:12, 13921114.37it/s]  2%|▏         | 4030464/170498071 [00:00<00:07, 21033118.31it/s]  4%|▍         | 6914048/170498071 [00:00<00:06, 24234965.85it/s]  6%|▌         | 9601024/170498071 [00:00<00:06, 24001326.87it/s]  8%|▊         | 12812288/170498071 [00:00<00:06, 26213552.49it/s]  9%|▉         | 15728640/170498071 [00:00<00:05, 27147524.44it/s] 11%|█         | 18939904/170498071 [00:00<00:05, 28561966.59it/s] 13%|█▎        | 22249472/170498071 [00:00<00:04, 29893009.99it/s] 15%|█▍        | 25460736/170498071 [00:00<00:04, 30466993.33it/s] 17%|█▋        | 28540928/170498071 [00:01<00:06, 21631233.53it/s] 18%|█▊        | 31064064/170498071 [00:01<00:08, 17266107.56it/s] 19%|█▉        | 33161216/170498071 [00:01<00:08, 17004414.57it/s] 21%|██        | 36012032/170498071 [00:01<00:06, 19494857.13it/s] 23%|██▎       | 39944192/170498071 [00:01<00:05, 22565101.72it/s] 25%|██▍       | 42434560/170498071 [00:02<00:11, 11469467.31it/s] 26%|██▌       | 44302336/170498071 [00:05<00:48, 2583044.23it/s]  27%|██▋       | 46465024/170498071 [00:07<01:07, 1833771.66it/s] 29%|██▉       | 49709056/170498071 [00:07<00:43, 2776219.06it/s] 32%|███▏      | 54231040/170498071 [00:07<00:25, 4564293.96it/s] 35%|███▍      | 58982400/170498071 [00:07<00:15, 6998856.02it/s] 37%|███▋      | 62881792/170498071 [00:07<00:11, 9368259.60it/s] 40%|███▉      | 67829760/170498071 [00:07<00:07, 13188567.51it/s] 43%|████▎     | 72876032/170498071 [00:07<00:05, 17636043.84it/s] 45%|████▌     | 77398016/170498071 [00:07<00:04, 21531024.12it/s] 49%|████▉     | 83165184/170498071 [00:07<00:03, 27559226.58it/s] 52%|█████▏    | 88342528/170498071 [00:08<00:02, 32313292.86it/s] 55%|█████▍    | 93618176/170498071 [00:08<00:02, 36583484.05it/s] 58%|█████▊    | 98566144/170498071 [00:08<00:01, 39318014.30it/s] 61%|██████    | 103677952/170498071 [00:08<00:01, 42202031.62it/s] 64%|██████▎   | 108593152/170498071 [00:08<00:01, 43500173.00it/s] 67%|██████▋   | 114229248/170498071 [00:08<00:01, 46548367.21it/s] 70%|██████▉   | 119275520/170498071 [00:08<00:01, 47602635.17it/s] 73%|███████▎  | 124321792/170498071 [00:08<00:00, 48053483.31it/s] 76%|███████▌  | 129662976/170498071 [00:08<00:00, 49024625.18it/s] 79%|███████▉  | 134709248/170498071 [00:09<00:00, 43577330.51it/s] 82%|████████▏ | 139296768/170498071 [00:09<00:00, 42655404.95it/s] 84%|████████▍ | 143720448/170498071 [00:09<00:00, 42498550.33it/s] 87%|████████▋ | 148078592/170498071 [00:09<00:00, 41073205.01it/s] 89%|████████▉ | 152272896/170498071 [00:09<00:00, 40312460.78it/s] 92%|█████████▏| 156401664/170498071 [00:09<00:00, 40568094.43it/s] 94%|█████████▍| 160759808/170498071 [00:09<00:00, 40746418.95it/s] 97%|█████████▋| 165150720/170498071 [00:09<00:00, 40995279.19it/s] 99%|█████████▉| 169279488/170498071 [00:09<00:00, 41031339.18it/s]100%|██████████| 170498071/170498071 [00:09<00:00, 17148561.18it/s]Extracting ../data/cifar10-data/cifar-10-python.tar.gz to ../data/cifar10-data
Files already downloaded and verified
generate log from in-distribution data


 Final Accuracy: 24484/26032 (94.05%)

generate log  from out-of-distribution data
../src/test_detection.py:73: UserWarning: volatile was removed and now has no effect. Use `with torch.no_grad():` instead.
  data, target = Variable(data, volatile=True), Variable(target)
../src/test_detection.py:83: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  soft_out = F.softmax(output)
../src/test_detection.py:98: UserWarning: volatile was removed and now has no effect. Use `with torch.no_grad():` instead.
  data, target = Variable(data, volatile=True), Variable(target)
../src/test_detection.py:103: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  soft_out = F.softmax(output)
calculate metrics
  Performance of Baseline detector
TNR at TPR 95%:            85.317%
AUROC:                     94.703%
Detection acc:             92.733%
AUPR In:                   94.787%
AUPR Out:                  97.838%
